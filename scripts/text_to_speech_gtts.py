import os
from TTS.api import TTS
import json
import logging
import gc
import time
import re

# Configura√ß√£o de logs
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Fun√ß√£o de pr√©-processamento
def preprocess_text(text):
    # Remove pontua√ß√µes desnecess√°rias
    text = re.sub(r'[.,;:!?]+', ' ', text)  # Substitui pontua√ß√µes por espa√ßos

    # Formata endere√ßos web
    text = re.sub(r'(\b\w+\.com\b)', lambda x: x.group(1).replace('.', ' ponto '), text)
    text = re.sub(r'(\b\w+\.org\b)', lambda x: x.group(1).replace('.', ' ponto '), text)
    text = re.sub(r'(\b\w+\.net\b)', lambda x: x.group(1).replace('.', ' ponto '), text)

    # Remove espa√ßos extras
    text = re.sub(r'\s+', ' ', text).strip()

    return text

input_folder = '../data/'
audio_folder = os.path.join(input_folder, 'audio')
os.makedirs(audio_folder, exist_ok=True)

output_file = os.path.join(input_folder, 'feeds_folha_uol_com_br_news.json')

try:
    # Carrega o modelo de TTS espec√≠fico para portugu√™s
    logger.info("üîß Carregando o modelo de TTS...")
    tts = TTS(model_name="tts_models/pt/cv/vits")
    logger.info("‚úÖ Modelo carregado com sucesso.")

    # Verifica se o arquivo JSON existe
    if not os.path.exists(output_file):
        raise FileNotFoundError(f"‚ùå Arquivo JSON n√£o encontrado: {output_file}")

    # Carrega o JSON
    logger.info("üìÇ Carregando o arquivo JSON...")
    with open(output_file, 'r', encoding='utf-8') as file:
        news_data = json.load(file)

    # Verifica se o JSON cont√©m uma lista de not√≠cias
    if isinstance(news_data, list):
        for i, article in enumerate(news_data):
            summary = article.get('summary', '')
            if summary:
                # Pr√©-processa o texto
                processed_text = preprocess_text(summary)
                logger.info(f"üîß Texto pr√©-processado: {processed_text[:100]}...")  # Loga os primeiros 100 caracteres

                # Gera um arquivo de √°udio para cada not√≠cia
                output_audio = os.path.join(audio_folder, f'noticia_{i+1}.mp3')
                logger.info(f"üîä Gerando √°udio para a not√≠cia {i+1}...")

                # Gera o √°udio com o modelo em portugu√™s
                tts.tts_to_file(
                    text=processed_text,
                    file_path=output_audio
                )
                logger.info(f"üîä √Åudio salvo em {output_audio}")

                # Limpa o cache e libera mem√≥ria
                logger.info("üßπ Limpando cache e liberando mem√≥ria...")
                del tts  # Remove o objeto TTS da mem√≥ria
                gc.collect()  # For√ßa a coleta de lixo

                # Adiciona um timeout de 5 segundos
                logger.info("‚è≥ Aguardando 5 segundos antes da pr√≥xima gera√ß√£o...")
                time.sleep(5)

                # Recarrega o modelo para o pr√≥ximo √°udio
                tts = TTS(model_name="tts_models/pt/cv/vits")
            else:
                logger.warning(f"‚ö†Ô∏è Artigo {i+1} n√£o cont√©m um resumo.")
    else:
        logger.error("‚ùå O arquivo JSON n√£o cont√©m uma lista de not√≠cias.")

except Exception as e:
    logger.error(f"‚ùå Erro durante a execu√ß√£o do script: {e}", exc_info=True)