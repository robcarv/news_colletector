import os
from TTS.api import TTS
import json
import logging
import gc
import time
import re
import requests
from dotenv import load_dotenv

# Configura√ß√£o de logs
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Carrega as vari√°veis de ambiente do arquivo .env
load_dotenv()

# Constantes para o Telegram (carregadas do .env)
BOT_TOKEN = os.getenv('BOT_TOKEN')  # Token do bot do Telegram
CHAT_ID = os.getenv('CHAT_ID')  # ID do chat do Telegram

# Fun√ß√£o para remover tags HTML
def remove_html_tags(text):
    """
    Remove todas as tags HTML de um texto.
    
    :param text: Texto contendo tags HTML
    :return: Texto sem tags HTML
    """
    clean = re.compile(r'<.*?>')
    return re.sub(clean, '', text)

# Fun√ß√£o para limpar caracteres problem√°ticos
def clean_text(text):
    """
    Remove caracteres que podem causar problemas na formata√ß√£o Markdown do Telegram.
    
    :param text: Texto a ser limpo
    :return: Texto limpo
    """
    # Remove caracteres especiais que podem interferir na formata√ß√£o Markdown
    text = re.sub(r'([_*\[\]()~`>#+\-=|{}.!])', r'\\\1', text)
    return text

# Fun√ß√£o para enviar mensagem formatada para o Telegram
def send_to_telegram(title, summary, source, audio_path):
    """
    Envia uma mensagem formatada para o Telegram com o t√≠tulo, resumo, fonte e √°udio da not√≠cia.
    
    :param title: T√≠tulo da not√≠cia
    :param summary: Resumo da not√≠cia
    :param source: Fonte da not√≠cia
    :param audio_path: Caminho do arquivo de √°udio
    """
    try:
        # Remove tags HTML e limpa o texto
        title = remove_html_tags(title)
        summary = remove_html_tags(summary)
        source = remove_html_tags(source)

        # Limpa caracteres problem√°ticos
        title = clean_text(title)
        summary = clean_text(summary)
        source = clean_text(source)

        # Formata a mensagem
        message = (
            f"üì∞ *{title}*\n\n"
            f"üîç *Resumo:* {summary}\n\n"
            f"üìå *Fonte:* {source}\n\n"
            f"üéß Ou√ßa o √°udio abaixo:"
        )

        # Envia a mensagem de texto
        url_text = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
        payload = {
            'chat_id': CHAT_ID,
            'text': message,
            'parse_mode': 'Markdown'  # Usa Markdown para formata√ß√£o
        }
        response_text = requests.post(url_text, data=payload)
        if response_text.status_code != 200:
            logger.error(f"‚ùå Erro ao enviar mensagem de texto para o Telegram: {response_text.text}")
            return

        # Envia o √°udio
        url_audio = f"https://api.telegram.org/bot{BOT_TOKEN}/sendAudio"
        with open(audio_path, 'rb') as audio_file:
            files = {'audio': audio_file}
            data = {'chat_id': CHAT_ID}
            response_audio = requests.post(url_audio, files=files, data=data)
            if response_audio.status_code != 200:
                logger.error(f"‚ùå Erro ao enviar √°udio para o Telegram: {response_audio.text}")
            else:
                logger.info(f"‚úÖ √Åudio e mensagem enviados com sucesso para o Telegram.")
    except Exception as e:
        logger.error(f"‚ùå Erro ao enviar mensagem ou √°udio para o Telegram: {e}")

# Fun√ß√£o de pr√©-processamento
def preprocess_text(text):
    # Remove pontua√ß√µes desnecess√°rias
    text = re.sub(r'[.,;:!?]+', ' ', text)  # Substitui pontua√ß√µes por espa√ßos

    # Formata endere√ßos web
    text = re.sub(r'(\b\w+\.com\b)', lambda x: x.group(1).replace('.', ' ponto '), text)
    text = re.sub(r'(\b\w+\.org\b)', lambda x: x.group(1).replace('.', ' ponto '), text)
    text = re.sub(r'(\b\w+\.net\b)', lambda x: x.group(1).replace('.', ' ponto '), text)

    # Remove espa√ßos extras
    text = re.sub(r'\s+', ' ', text).strip()

    return text

input_folder = '../data/'
audio_folder = os.path.join(input_folder, 'audio')
os.makedirs(audio_folder, exist_ok=True)

output_file = os.path.join(input_folder, 'feeds_folha_uol_com_br_news.json')

try:
    # Carrega o modelo de TTS espec√≠fico para portugu√™s
    logger.info("üîß Carregando o modelo de TTS...")
    tts = TTS(model_name="tts_models/multilingual/multi-dataset/xtts_v2")
    logger.info("‚úÖ Modelo carregado com sucesso.")

    # Verifica se o arquivo JSON existe
    if not os.path.exists(output_file):
        raise FileNotFoundError(f"‚ùå Arquivo JSON n√£o encontrado: {output_file}")

    # Carrega o JSON
    logger.info("üìÇ Carregando o arquivo JSON...")
    with open(output_file, 'r', encoding='utf-8') as file:
        news_data = json.load(file)

    # Verifica se o JSON cont√©m uma lista de not√≠cias
    if isinstance(news_data, list):
        for i, article in enumerate(news_data):
            title = article.get('title', '')
            summary = article.get('summary', '')
            source = article.get('source', '')
            if summary:
                # Remove tags HTML e pr√©-processa o texto
                summary = remove_html_tags(summary)
                processed_text = preprocess_text(summary)
                logger.info(f"üîß Texto pr√©-processado: {processed_text[:100]}...")  # Loga os primeiros 100 caracteres

                # Gera um arquivo de √°udio para cada not√≠cia
                output_audio = os.path.join(audio_folder, f'noticia_{i+1}.mp3')
                logger.info(f"üîä Gerando √°udio para a not√≠cia {i+1}...")

                # Gera o √°udio com o modelo em portugu√™s
                tts.tts_to_file(
                    text=summary,
                    speaker="Sofia Hellen",  # Voz em pt-BR
                    language="pt",           # Idioma: portugu√™s
                    file_path=output_audio
                )
                logger.info(f"üîä √Åudio salvo em {output_audio}")

                # Envia a not√≠cia e o √°udio para o Telegram
                logger.info(f"üì§ Enviando not√≠cia {i+1} para o Telegram...")
                send_to_telegram(title, summary, source, output_audio)

                # Limpa o cache e libera mem√≥ria
                logger.info("üßπ Limpando cache e liberando mem√≥ria...")
                del tts  # Remove o objeto TTS da mem√≥ria
                gc.collect()  # For√ßa a coleta de lixo

                # Adiciona um timeout de 5 segundos
                logger.info("‚è≥ Aguardando 5 segundos antes da pr√≥xima gera√ß√£o...")
                time.sleep(5)

                # Recarrega o modelo para o pr√≥ximo √°udio
                tts = TTS(model_name="tts_models/multilingual/multi-dataset/xtts_v2")
            else:
                logger.warning(f"‚ö†Ô∏è Artigo {i+1} n√£o cont√©m um resumo.")
    else:
        logger.error("‚ùå O arquivo JSON n√£o cont√©m uma lista de not√≠cias.")

except Exception as e:
    logger.error(f"‚ùå Erro durante a execu√ß√£o do script: {e}", exc_info=True)